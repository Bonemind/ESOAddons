WF_QuestTools.QuestAdded = function(eventCode, journalIndex, questName, objectiveName)	for k,v in pairs(WF_QuestTools.QuestsToAbandon) do		if v == questName then			AbandonQuest(journalIndex)			d("[MHQ] Auto-Declining quest: "..questName)			return;		end	end	WF_QuestTools.lastQuestAdded = journalIndex	d("[MHQ] Accepted quest: "..questName)	if GetIsQuestSharable(journalIndex) then		if WF_GetOrDefault( false, WF_QuestTools.UISettings.SetToAlwaysShare) then			ShareQuest(journalIndex)		else			for k,v in ipairs(WF_QuestTools.QuestsToShare) do				if v == questName then					ShareQuest(journalIndex)				end			end		end	end	if WF_GetOrDefault( false, WF_QuestTools.UISettings.SetToAlwaysTrack) then		WF_QuestTools.Track(journalIndex)	endendWF_QuestTools.Track = function(idx)	local targ = WF_QuestTools.GetIndex(idx)	if targ == 0 then return end	if targ ~= QUEST_JOURNAL:GetSelectedQuestIndex() then		for y = 1, 25, 1 do			if IsValidQuestIndex(y) then				SetTracked(1,false,y,0)			end		end		ZO_QuestTracker["tracker"]:InitialTrackingUpdate()		SetTracked(1,true,targ,0)		ZO_QuestTracker["tracker"]:InitialTrackingUpdate()		for y = 1, 25, 1 do			if IsValidQuestIndex(y) then				SetTracked(1,true,y,0)			end		end		ZO_QuestTracker["tracker"]:InitialTrackingUpdate()		if WF_QuestTools.UI._registeredEvents then			WF_QuestTools.UI.QuestEventCallback()		end	endendWF_QuestTools.Abandon = function(text)	local targ = WF_QuestTools.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] Abandoning Quest "..targ..": "..questName)	AbandonQuest(targ)endWF_QuestTools.BlackList = function(text)	local targ = WF_QuestTools.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] BlackListing Quest "..targ..": "..questName)	AbandonQuest(targ)	table.insert(WF_QuestTools.QuestsToAbandon, questName)endWF_QuestTools.Share = function(text)	local targ = WF_QuestTools.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] Sharing Quest "..targ..": "..questName)	ShareQuest(targ)endWF_QuestTools.WhiteList = function(text)	local targ = WF_QuestTools.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] WhiteListing Quest "..targ..": "..questName)	ShareQuest(targ)	table.insert(WF_QuestTools.QuestsToShare, questName)endWF_QuestTools.ListAll = function()	local quests = {}	local questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType	local zoneName, objectiveName, zoneIndex, poiIndex	for ii = 1, 25, 1 do		questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType = GetJournalQuestInfo(ii)		zoneName, objectiveName, zoneIndex, poiIndex = GetJournalQuestLocationInfo(ii)		if questName ~= "" then			if zoneName ~= "" then				if not quests[zoneName] then quests[zoneName] = {} end				quests[zoneName][ii] = "[MHQ] - "..ii..": ["..questLevel.."] "..questName			else				if not quests["Guild"] then quests["Guild"] = {} end				quests["Guild"][ii] = "[MHQ] - "..ii..": ["..questLevel.."] "..questName			end		end	end	for z,i in ipairs(quests) do		d("[MHQ] "..z)		for _,q in ipairs(i) do d(q) end	endendWF_QuestTools.Find = function(text)	local searchParms = text	if searchParms == nil then return end	searchParms = string.lower(searchParms.."")	searchParms = searchParms:gsub("find","")	local quests = {}	local questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType	local zoneName, objectiveName, zoneIndex, poiIndex	for searchFor in searchParms:gmatch("%w+") do		if searchFor ~= "" then			for ii = 1, 25, 1 do				questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType = GetJournalQuestInfo(ii)				zoneName, objectiveName, zoneIndex, poiIndex = GetJournalQuestLocationInfo(ii)				if questName ~= "" then					if zoneName == "" then zoneName = "Guild" end					local key = zoneName					local descr = questName					zoneName = string.lower(zoneName)					questName = string.lower(questName)					questLevel = questLevel..""					local foundMatch = false					if searchFor == questLevel then foundMatch = true end					if string.find(questName, searchFor) then foundMatch = true end					if string.find(zoneName, searchFor) then foundMatch = true end					if foundMatch then						if not quests[key] then quests[key] = {} end						if not quests[key][ii] then quests[key][ii] = "[MHQ] - "..ii..": ["..questLevel.."] "..descr end					end				end			end		end	end	for z,i in pairs(quests) do		d("[MHQ] "..z)		for _,q in pairs(i) do d(q) end	endendWF_QuestTools.GetIndex = function(str)	local targ = 0	if str == nil or str == "" then		targ = WF_QuestTools.lastQuestAdded	else		targ = tonumber(str)	end	if targ == 0 or targ == nil then return 0 end	return targend--[[* QUEST_TYPE_AVA* QUEST_TYPE_AVA_GRAND* QUEST_TYPE_AVA_GROUP* QUEST_TYPE_CLASS* QUEST_TYPE_CRAFTING* QUEST_TYPE_DUNGEON* QUEST_TYPE_GROUP* QUEST_TYPE_GUILD* QUEST_TYPE_MAIN_STORY* QUEST_TYPE_NONE* QUEST_TYPE_RAID]]--WF_QuestTools.GetQuestDetails = function( questIndex )	--[[		QUEST_STEP_TYPE_AND		QUEST_STEP_TYPE_END		QUEST_STEP_TYPE_OR	]]--	local questHintAdded = {}	local questConditionAdded = {}	local numSteps = GetJournalQuestNumSteps(questIndex)	local questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType = GetJournalQuestInfo(questIndex)	local stepText, visibility, stepType, trackerOverrideText, numConditions	local conditionDescr, hintDescr = "", ""	for step = 1, numSteps, 1 do		stepText, visibility, stepType, trackerOverrideText, numConditions = GetJournalQuestStepInfo( questIndex, step )		local conditionCount = GetJournalQuestNumConditions( questIndex, step )		for condition = 1, conditionCount, 1 do			local conditionText, current, max, isFailCondition, isComplete, isCreditShared = GetJournalQuestConditionInfo( questIndex, step, condition )			local conditionType = GetJournalQuestConditionType( questIndex, step, condition, true )			if conditionType ~= 8 then				if questConditionAdded[conditionText] == nil then					if conditionDescr ~= "" then conditionDescr = conditionDescr .. "\n" end					conditionDescr = conditionDescr .. conditionText					questConditionAdded[conditionText] = "added"				end			elseif conditionType == 8 then				if questHintAdded[conditionText] == nil and conditionText ~= "TRACKER GOAL TEXT" and conditionText ~= "Placeholder" and conditionText ~= "Dummy" then					if hintDescr ~= "" then hintDescr = hintDescr .. "\n" end					hintDescr = hintDescr .. "|ca0a0a0  * " .. conditionText .. "|r"					questHintAdded[conditionText] = "added"				end			end		end	end	if hintDescr ~= "" and conditionDescr ~= "" then		conditionDescr = conditionDescr .. "\n |ca0a0a0  Hints:|r\n" .. hintDescr .. ""	end	if conditionDescr == "" then		conditionDescr = activeStepTrackerOverrideText	end	return conditionDescrendWF_QuestTools.GetQuestForHeading = function( headingObj, questIndex )	local default, retVal = {}, {}	default.questType = 0	default.categoryName = nil	default.name = nil	default.categoryType = 1	default.questIndex = 0	default.level = 0	default.isPvP = false	default.isGuild = false	default.isStory = false	default.isDungeon = false	default.isGroup = false	default.isRaid = false	default.isClass = false	default.isCrafting = false	if headingObj.children[ tonumber( questIndex ) ] == nil then return default end	if headingObj.children[ tonumber( questIndex ) ].data == nil then return default end	retVal.questType = headingObj.children[ questIndex ].data.questType	retVal.categoryName = headingObj.children[ questIndex ].data.categoryName	retVal.name = headingObj.children[ questIndex ].data.name	retVal.categoryType = headingObj.children[ questIndex ].data.categoryType	retVal.questIndex = headingObj.children[ questIndex ].data.questIndex	retVal.level = headingObj.children[ questIndex ].data.level	retVal.isPvP = (retVal.questType == QUEST_TYPE_AVA or retVal.questType == QUEST_TYPE_AVA_GRAND or retVal.questType == QUEST_TYPE_AVA_GROUP)	retVal.isGuild = (retVal.questType == QUEST_TYPE_GUILD)	retVal.isStory = (retVal.questType == QUEST_TYPE_MAIN_STORY)	retVal.isDungeon = (retVal.questType == QUEST_TYPE_DUNGEON)	retVal.isGroup = (retVal.questType == QUEST_TYPE_GROUP)	retVal.isRaid = (retVal.questType == QUEST_TYPE_RAID)	retVal.isClass = (retVal.questType == QUEST_TYPE_CLASS)	retVal.isCrafting = (retVal.questType == QUEST_TYPE_CRAFTING)	return retValendWF_QuestTools.GetHeading = function( index, byName )	if byName then		for headingNum = 1, 100, 1 do			local headingObj = QUEST_JOURNAL.navigationTree.rootNode.children[ headingNum ]			if headingObj ~= nil then				local quest = WF_QuestTools.GetQuestForHeading( headingObj, 1 )				if quest.categoryName ~= nil then					if quest.categoryName == index then						return headingObj					end				end			end		end	else		if QUEST_JOURNAL ~= nil then			if QUEST_JOURNAL.navigationTree ~= nil then				if QUEST_JOURNAL.navigationTree.rootNode ~= nil then					if QUEST_JOURNAL.navigationTree.rootNode.children ~= nil then						return QUEST_JOURNAL.navigationTree.rootNode.children[ tonumber( index ) ]					end				end			end		end		return ""	endendWF_QuestTools.GetAllForUI = function()	local tbl = {}	for hh = 1, 100, 1 do		local heading = WF_QuestTools.GetHeading( hh )		if heading == nil then return tbl end		local quests = {}		local qHead = nil		for qq = 1, 25, 1 do			local quest = WF_QuestTools.GetQuestForHeading( heading, qq )			if quest.categoryName ~= nil then				if not qHead then qHead = quest.categoryName end				table.insert(quests, quest)			end		end -- /script WF_QuestTools.GetAllForUI()		table.insert(tbl, {} )		tbl[hh].sectionName = qHead		tbl[hh].sectionQuests = quests	endendWF_QuestTools.GetLocalZoneForUI = function( zoneName )	local tbl = {}	for hh = 1, 100, 1 do		local heading = WF_QuestTools.GetHeading( hh )		if heading == nil then return tbl end		local doInsert = false		local quests = {}		local qHead = nil		for qq = 1, 25, 1 do			local quest = WF_QuestTools.GetQuestForHeading( heading, qq )			if quest.categoryName ~= nil then				if zoneName == quest.categoryName then					doInsert = true					if not qHead then qHead = quest.categoryName end					table.insert(quests, quest)				end			end		end -- /script WF_QuestTools.GetAllForUI()		if doInsert then			table.insert(tbl, {} )			tbl[hh].sectionName = qHead			tbl[hh].sectionQuests = quests		end	endend-- FONTWF_QuestTools._fontList = {}WF_QuestTools._fontList["Arial Narrow"]			= "EsoUI/Common/Fonts/arialn.ttf"WF_QuestTools._fontList["Consolas"]				= "EsoUI/Common/Fonts/consola.ttf"WF_QuestTools._fontList["ESO Cartographer"]		= "EsoUI/Common/Fonts/esocartographer-bold.otf"WF_QuestTools._fontList["Fontin Bold"]			= "EsoUI/Common/Fonts/fontin_sans_b.otf"WF_QuestTools._fontList["Fontin Italic"]		= "EsoUI/Common/Fonts/fontin_sans_i.otf"WF_QuestTools._fontList["Fontin Regular"]		= "EsoUI/Common/Fonts/fontin_sans_r.otf"WF_QuestTools._fontList["Fontin SmallCaps"]		= "EsoUI/Common/Fonts/fontin_sans_sc.otf"WF_QuestTools._fontList["ProseAntique"]			= "EsoUI/Common/Fonts/ProseAntiquePSMT.otf"WF_QuestTools._fontList["Skyrim Handwritten"]	= "EsoUI/Common/Fonts/Handwritten_Bold.otf"WF_QuestTools._fontList["Trajan Pro"]			= "EsoUI/Common/Fonts/trajanpro-regular.otf"WF_QuestTools._fontList["Univers 55"]			= "EsoUI/Common/Fonts/univers55.otf"WF_QuestTools._fontList["Univers 57"]			= "EsoUI/Common/Fonts/univers57.otf"WF_QuestTools._fontList["Univers 67"]			= "EsoUI/Common/Fonts/univers67.otf"WF_QuestTools._fonts = {}local i = 0for k in pairs(WF_QuestTools._fontList) do	i = i + 1	WF_QuestTools._fonts[i] = kendtable.sort(WF_QuestTools._fonts)WF_QuestTools._fontStyles = {"normal", "outline", "thick-outline", "shadow", "soft-shadow-thick", "soft-shadow-thin"}WF_QuestTools.ToggleQuestWindow = function()	WF_QuestTools.UI.QuestTracker(true)endWF_QuestTools.ZoneFontChange = function()	if WF_QuestTools_Tracker == nil then return end	WF_QuestTools_Tracker.LoadZones()	if not WF_QuestTools.UISettings.Joviex then return end	local bg = WF_QuestTools.Background	local filter = WF_QuestTools.Filter	local zone = WF_QuestTools.Zone	local title = WF_QuestTools.Title	local body = WF_QuestTools.Body	local frameWidth = bg.width	WF_QuestTools_Tracker:SetWidth(frameWidth)	WF_QuestTools_Tracker.OutAlpha = bg.out	WF_QuestTools_Tracker.Backdrop:SetWidth(frameWidth)	WF_QuestTools_Tracker.Title.Backdrop:SetDimensions(frameWidth, 6)		-- local bleh, point, anchor, point2, x, y = WF_QuestTools_Tracker.UnderlayBackdrop:GetAnchor()	-- WF_QuestTools_Tracker.UnderlayBackdrop:ClearAnchors()	-- WF_QuestTools_Tracker.UnderlayBackdrop:SetAnchor( point, anchor, point2, WF_QuestTools_Tracker.Title.Backdrop:GetWidth()-9, 3 )		local charLevel = GetUnitLevel( "player" )	local red = charLevel + 4	local orange = charLevel + 2	local yellow = charLevel - 2	local green = charLevel - 4	local masterHeight = 0	for k, v in pairs(WF_QuestTools_Tracker.Sections) do		v.Header:SetDimensions( frameWidth - zone.CounterSize * 2, zone.Size + 2 )		v.Header:SetFont(string.format( "%s|%d|%s", WF_QuestTools._fontList[zone.Font], zone.Size, zone.Style))		v.Header:SetColor(zone.Color.r, zone.Color.g, zone.Color.b, 1)		c = v.Header:GetNamedChild("_1")		if c ~= nil then			c:SetDimensions( zone.CounterSize, zone.Size + 2 )			c:SetFont(string.format( "%s|%d|%s", WF_QuestTools._fontList[zone.Font], zone.CounterSize, zone.Style))			c:SetColor(zone.Counter.r, zone.Counter.g, zone.Counter.b, 1)		end		local wrap = v.Header:GetNamedChild("_Wrapper")		local cont = v.Header:GetNamedChild("_Container")		for x, q in pairs(v.Quests) do			q:SetDimensions( frameWidth, title.Size )			q:SetFont(string.format( "%s|%d|%s", WF_QuestTools._fontList[title.Font], title.Size, title.Style))			q:SetWidth( frameWidth )			level =  GetJournalQuestLevel(q.questIndex)			if filter.Override == true then				c = filter.Worthless				if level >= yellow and level < charLevel then					c = filter.Easy				elseif level >= charLevel and level < orange then					c = filter.Par				elseif level >= orange and level < red then					c = filter.Difficult				elseif level >= red then					c = filter.Hard				end				q:SetColor(c.r, c.g, c.b, 1)			end			q.Details:SetFont(string.format( "%s|%d|%s", WF_QuestTools._fontList[body.Font], body.Size, body.Style))			q.Details:SetWidth( frameWidth - 40)		end	endend